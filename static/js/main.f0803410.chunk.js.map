{"version":3,"sources":["styles/images/ring.svg","serviceWorker.js","actions/timer.js","middleware/localStorage.js","reducers/timerReducer.js","actions/task.js","reducers/taskReducer.js","reducers/index.js","sagas/task.js","sagas/index.js","styles/index.js","components/parts/Timer.jsx","components/parts/Dialog.jsx","helpers/constants.js","helpers/index.js","components/parts/Task.jsx","components/parts/Log.jsx","components/parts/Chart.jsx","components/Main.jsx","components/Info.jsx","components/NotFound.jsx","App.js","index.js"],"names":["module","exports","__webpack_require__","p","Boolean","window","location","hostname","match","CREATE_ITEM","CREATE_LOG","ITEM_SET_NAME","ADD_TO_LOG","DELETE_FROM_LOG","CLEAR_LOG","INITIAL_STATE","item","id","name","start","end","duration","list","GET_TASK","GET_TASK_LOADING","GET_TASK_SUCCESS","GET_TASK_FAILED","CLEAR_TASK","loading","success","failed","rootReducer","combineReducers","timer","state","arguments","length","undefined","action","type","payload","Object","objectSpread","concat","toConsumableArray","filter","task","getTask","root","delay","ms","Promise","res","setTimeout","getList","data","regenerator_default","a","wrap","_context","prev","next","call","select","sent","find","put","t0","stop","_marked","this","_context2","all","takeLatest","_marked2","fork","sagas_marked","src_styles","button","background","color","padding","mainContainer","width","paddingRight","paddingLeft","marginRight","marginLeft","mainTabList","flexGrow","backgroundColor","mainTab","fontWeight","fontSize","timerClock","margin","taskWrapper","textAlign","infoCard","marginTop","infoFooter","justifyContent","logRow","logCell","paddingTop","paddingBottom","chartButtonContainer","marginBottom","dialogTitle","dialogButton","infoPreloader","Timer","props","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","time","Duration","fromMillis","intervalId","started","runner","prevProps","clearInterval","value","_this2","interval","setInterval","addSecond","setState","plus","classes","react_default","createElement","Fab_default","variant","className","toFormat","PureComponent","withStyles","styles","MyDialog","_this$props","open","closeDialog","Dialog_default","onClose","aria-labelledby","aria-describedby","DialogTitle_default","disableTypography","DialogContent_default","DialogContentText_default","DialogActions_default","Button_default","onClick","autoFocus","Component","GENERATE_MIN_TASKS","GENERATE_MAX_TASKS","GENERATE_MIN_DURATION","GENERATE_MAX_DURATION","GENERATE_MIN_INTERVAL","GENERATE_MAX_INTERVAL","GENERATE_START_HOUR","getNextId","JSON","parse","localStorage","getItem","result","sort","b","pop","getRandom","min","max","Math","floor","random","buildChartData","intervals","map","DateTime","fromISO","Interval","fromDateTimes","newHours","_loop","hour","sum","startHour","fromObject","minute","second","endHour","currentHourInterval","found","int","intersection","forEach","el","diff","toObject","minutes","push","Task","dialog","onChangeName","e","changeName","target","onStartClick","createItem","local","toISO","onStopClick","addToLog","openDialog","renderButton","size","diffInMillis","diffNow","abs","valueOf","_this$state","Grid_default","container","spacing","justify","xs","parts_Dialog","Input_default","onChange","parts_Timer","connect","dispatch","setNameAction","createItemAction","Log","destroy","deleteFromLog","Fragment","Table_default","TableHead_default","TableRow_default","TableCell_default","align","TableBody_default","row","key","component","Link","to","Chart","generateEvents","createLog","clearLog","date","i","_this$props2","react","ResponsiveContainer","height","BarChart","top","right","left","bottom","XAxis","dataKey","YAxis","CartesianGrid","Bar","fill","barSize","Legend","verticalAlign","createLogAction","Main","getCurrentTab","_this$props$match$par","params","tab","renderTab","parts_Log","parts_Chart","parts_Task","lg","md","Tabs_default","Tab_default","label","Info","clearTask","src","ring","alt","Redirect","Card_default","CardActionArea_default","CardHeader_default","title","Divider_default","CardContent_default","Typography_default","CardActions_default","renderInfo","NotFound","App","console","log","process","BrowserRouter","basename","Switch","Route","exact","path","sagaMiddleware","createSagaMiddleware","preloadedState","initialState","error","startup","store","createStore","composeWithDevTools","applyMiddleware","setItem","stringify","removeItem","run","rootSaga","ReactDOM","render","es","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f0803410.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/ring.4d1881e7.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export const CREATE_ITEM = 'CREATE_ITEM';\nexport const CREATE_LOG = 'CREATE_LOG';\nexport const ITEM_SET_NAME = 'ITEM_SET_NAME';\nexport const ADD_TO_LOG = 'ADD_TO_LOG';\nexport const DELETE_FROM_LOG = 'DELETE_FROM_LOG';\nexport const CLEAR_LOG = 'CLEAR_LOG';\n\nexport function createItemAction(item) {\n    return { type: CREATE_ITEM, payload: item }\n}\n\nexport function createLogAction(list) {\n    return { type: CREATE_LOG, payload: list }\n}\n\nexport function setNameAction(name) {\n    return { type: ITEM_SET_NAME, payload: name }\n}\n\nexport function addLogAction(object) {\n    return { type: ADD_TO_LOG, payload: object }\n}\n\nexport function deleteFromLogAction(id) {\n    return { type: DELETE_FROM_LOG, payload: id }\n}\n\nexport function clearLogAction() {\n    return { type: CLEAR_LOG }\n}\n\n\n\n\n\n","import { CREATE_ITEM, CREATE_LOG, ITEM_SET_NAME, ADD_TO_LOG, DELETE_FROM_LOG, CLEAR_LOG } from '../actions/timer';\n\nexport default () => () => next => action => {\n    if (action.type) {\n        switch (action.type) {\n            case CREATE_ITEM: {\n                localStorage.setItem('item', JSON.stringify(action.payload));\n                break;\n            }\n            case CREATE_LOG: {\n                localStorage.setItem('list', JSON.stringify(action.payload));\n                break;\n            }\n            case ADD_TO_LOG: {\n                const list = JSON.parse(localStorage.getItem('list')) || [];\n                list.push(action.payload);\n                localStorage.removeItem('item');\n                localStorage.removeItem('name');\n                localStorage.setItem('list', JSON.stringify(list));\n                break;\n            }\n            case DELETE_FROM_LOG: {\n                let list = JSON.parse(localStorage.getItem('list'));\n                if (list) {\n                    list = list.filter(item => item.id !== action.payload);\n                    localStorage.setItem('list', JSON.stringify(list));\n                }\n                break;\n            }\n            case ITEM_SET_NAME: {\n                const item = JSON.parse(localStorage.getItem('item'));\n                if (item) {\n                    item.name = action.payload;\n                    localStorage.setItem('item', JSON.stringify(item));\n                }\n                localStorage.setItem('name', action.payload || '');\n                break;\n            }\n            case CLEAR_LOG: {\n                localStorage.removeItem('list');\n                break;\n            }\n            default:\n                break;\n        }\n    }\n\n    return next(action);\n};\n","import { CREATE_ITEM, CREATE_LOG, ITEM_SET_NAME, ADD_TO_LOG, DELETE_FROM_LOG, CLEAR_LOG } from '../actions/timer';\n\nexport const INITIAL_STATE = {\n    item: {\n        id: 0,\n        name: '',\n        start: null,\n        end: null,\n        duration: null,\n    },\n    list: [],\n};\n\nexport default function timerReducer(state = INITIAL_STATE, action) {\n    switch (action.type) {\n        case CREATE_ITEM:\n            return {\n                item: action.payload,\n                list: state.list,\n            };\n        case CREATE_LOG:\n            return {\n                item: state.item,\n                list: action.payload,\n            };\n        case ITEM_SET_NAME:\n            return {\n                item: {\n                    ...state.item,\n                    name: action.payload,\n                },\n                list: state.list,\n            };\n        case ADD_TO_LOG:\n            return {\n                item: INITIAL_STATE.item,\n                list: [ ...state.list, action.payload ],\n            };\n        case DELETE_FROM_LOG:\n            return {\n                item: state.item,\n                list: state.list.filter(item => item.id !== action.payload),\n            };\n        case CLEAR_LOG:\n            return {\n                item: state.item,\n                list: INITIAL_STATE.list,\n            };\n        default: return state;\n    }\n\n};\n","export const GET_TASK = 'GET_TASK';\nexport const GET_TASK_LOADING = 'GET_TASK_LOADING';\nexport const GET_TASK_SUCCESS = 'GET_TASK_SUCCESS';\nexport const GET_TASK_FAILED = 'GET_TASK_FAILED';\nexport const CLEAR_TASK = 'CLEAR_TASK';\n\nexport function getTask(id) {\n    return { type: GET_TASK, payload: id }\n}\n\nexport function getTaskSuccess(item) {\n    return { type: GET_TASK_SUCCESS, payload: item }\n}\n\nexport function getTaskLoading() {\n    return { type: GET_TASK_LOADING }\n}\n\nexport function getTaskError(error) {\n    return { type: GET_TASK_FAILED, payload: error }\n}\n\nexport function clearTask() {\n    return { type: CLEAR_TASK }\n}\n\n\n","import { GET_TASK_SUCCESS, GET_TASK_LOADING, GET_TASK_FAILED, CLEAR_TASK } from '../actions/task';\n\nexport const INITIAL_STATE = {\n    loading: true,\n    success: false,\n    failed: false,\n    item: {\n        id: 0,\n        name: null,\n        start: null,\n        end: null,\n        duration: null,\n    },\n};\n\nexport default function taskReducer(state = INITIAL_STATE, action) {\n    switch (action.type) {\n\n        case GET_TASK_LOADING:\n            return {\n                ...state,\n                loading: true,\n            };\n\n        case GET_TASK_SUCCESS:\n            return {\n                loading: false,\n                success: true,\n                failed: false,\n                item: action.payload,\n            };\n\n        case GET_TASK_FAILED:\n            return {\n                loading: false,\n                success: false,\n                failed: true,\n                item: action.payload,\n            };\n\n        case CLEAR_TASK:\n            return INITIAL_STATE;\n\n        default:\n            return state;\n    }\n}\n","import { combineReducers } from 'redux';\n\nimport timer from './timerReducer';\nimport task from './taskReducer';\n\nconst rootReducer = combineReducers({\n    timer,\n    task,\n});\n\nexport default rootReducer;\n","/**\n * @module Sagas/Task\n * @desc Task\n */\n\nimport { all, call, put, takeLatest, select } from 'redux-saga/effects';\n\nimport { GET_TASK, GET_TASK_SUCCESS, GET_TASK_FAILED} from '../actions/task';\n\nconst delay = (ms) => new Promise(res => setTimeout(res, ms));\n\nconst getList = state => state.timer.list;\n/**\n * getTask\n */\nexport function* getTask(data) {\n    try {\n        yield call(delay, 1000);\n        const list = yield select(getList);\n\n        const task = list.find(item => item.id === +data.payload);\n\n        if (task) {\n            yield put({\n                type: GET_TASK_SUCCESS,\n                payload: task,\n            });\n        } else {\n            yield put({\n                type: GET_TASK_FAILED,\n                payload: 404,\n            });\n        }\n    } catch (err) {\n        yield put({\n            type: GET_TASK_FAILED,\n            payload: err,\n        });\n    }\n}\n\n/**\n * Task Sagas\n */\nexport default function* root() {\n    yield all([\n        takeLatest(GET_TASK, getTask),\n    ]);\n};\n","import { all, fork } from 'redux-saga/effects';\n\nimport task from './task';\n\n/**\n * rootSaga\n */\nexport default function* root() {\n    yield all([fork(task)]);\n}\n","export default {\n    button: {\n        background: '#fff',\n        color: '#3f51b5',\n        padding: '5px',\n    },\n    mainContainer: {\n        width: '100%',\n        paddingRight: '15px',\n        paddingLeft: '15px',\n        marginRight: 'auto',\n        marginLeft: 'auto',\n    },\n    mainTabList: {\n        flexGrow: 1,\n        backgroundColor: '#02BCD4',\n        width: '100%',\n        color: '#fff',\n    },\n    mainTab: {\n        fontWeight: 600,\n        fontSize: 'small',\n    },\n    timerClock: {\n        background: '#fff',\n        color: '#3f51b5',\n        fontWeight: 900,\n        fontSize: 'x-large',\n        padding: '65px 80px 90px',\n        margin: '20px',\n    },\n    taskWrapper: {\n        margin: '10px 0 25px 0',\n        textAlign: 'center',\n    },\n    infoCard: {\n        marginTop: 20,\n        textAlign: 'left',\n    },\n    infoFooter: {\n        justifyContent: 'center',\n    },\n    logRow: {\n        background: '#EAF6FF',\n    },\n    logCell: {\n        textAlign: 'center',\n        paddingTop: '10px',\n        paddingBottom: '10px',\n        color: '#3f51b5',\n    },\n    chartButtonContainer: {\n        textAlign: 'right',\n        marginBottom: 30,\n    },\n    dialogTitle: {\n        color: '#ff0000',\n    },\n    dialogButton: {\n        color: '#0EBFD7',\n    },\n    infoPreloader: {\n        marginTop: 50,\n    }\n};\n","import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Duration } from 'luxon';\n\nimport Fab from '@material-ui/core/Fab';\nimport { withStyles } from \"@material-ui/core/styles\";\n\nimport styles from '../../styles';\n\nclass Timer extends PureComponent {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            time: Duration.fromMillis(props.duration ? props.duration : 0),\n            intervalId: null,\n        };\n    }\n\n    static propTypes = {\n        started: PropTypes.bool.isRequired,\n        duration: PropTypes.number,\n    };\n\n    componentDidMount() {\n        const { started } = this.props;\n        this.runner(started);\n    }\n\n    componentDidUpdate(prevProps) {\n        const { started } = this.props;\n        if (started !== prevProps.started) {\n            this.runner(started);\n        }\n    }\n\n    componentWillUnmount() {\n        const { intervalId } = this.state;\n\n        clearInterval(intervalId);\n    }\n\n    runner(value) {\n        const { intervalId } = this.state;\n\n        if (value) {\n            const interval = setInterval(() => {\n                this.addSecond();\n            }, 1000);\n            this.setState({\n                intervalId: interval,\n            })\n        } else {\n            clearInterval(intervalId);\n            this.setState({\n                time: Duration.fromMillis(0),\n            });\n        }\n    }\n\n\n    addSecond() {\n        const { time } = this.state;\n        this.setState({\n            time: time.plus(Duration.fromMillis(1000)),\n        });\n    }\n\n    state = {\n        time: null,\n    };\n\n    render() {\n        const { time } = this.state;\n        const { classes } = this.props;\n\n        return (\n            <Fab variant=\"round\" className={classes.timerClock}>\n                { time.toFormat('hh:mm:ss') }\n            </Fab>\n        );\n    }\n} export default withStyles(styles)(Timer);\n","import React, {Component} from 'react';\nimport Button from '@material-ui/core/Button';\nimport PropTypes from 'prop-types';\n\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle'\nimport { withStyles } from '@material-ui/core/styles';\n\nimport styles from '../../styles';\n\nclass MyDialog extends Component {\n\n    static propTypes = {\n        open: PropTypes.bool.isRequired,\n    };\n\n    render() {\n        const { open, closeDialog, classes } = this.props;\n\n        return (\n            <Dialog\n                open={ open }\n                onClose={ closeDialog() }\n                aria-labelledby='alert-dialog-title'\n                aria-describedby='alert-dialog-description'\n            >\n                <DialogTitle id='alert-dialog-title' disableTypography={true}><h2 className={classes.dialogTitle}>Empty task name</h2></DialogTitle>\n                <DialogContent>\n                    <DialogContentText id='alert-dialog-description'>\n                        You are trying close your task without name, enter the title and try again!\n                    </DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={ closeDialog() } className={classes.dialogButton} autoFocus>\n                        Close\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        )\n    }\n}\nexport default withStyles(styles)(MyDialog);\n","export const CHART_START_HOUR = 0;\nexport const CHART_END_HOUR = 23;\nexport const MINUTES_IN_HOUR = 60;\n\nexport const GENERATE_MIN_TASKS = 10;\nexport const GENERATE_MAX_TASKS = 15;\nexport const GENERATE_MIN_DURATION = 10;\nexport const GENERATE_MAX_DURATION = 90;\nexport const GENERATE_MIN_INTERVAL = 10;\nexport const GENERATE_MAX_INTERVAL = 50;\nexport const GENERATE_START_HOUR = 4;\n\nexport const ActionTypes = {\n    GET_TASK_SUCCESS: 'GET_TASK_SUCCESS',\n    GET_TASK_FAILURE: 'GET_TASK_FAILURE',\n};\n","import { DateTime, Interval } from 'luxon';\nimport { CHART_START_HOUR, CHART_END_HOUR, MINUTES_IN_HOUR } from './constants';\n\nexport const getNextId = () => {\n    const list = JSON.parse(localStorage.getItem('list'));\n    let result = 1;\n    if (list) {\n        list.sort((a, b) => a.id - b.id);\n        result = ++list.pop().id;\n    }\n    return result;\n};\n\nexport const getRandom = (min = 0, max) => {\n    return Math.floor(Math.random() * (max-min) + min + 1);\n};\n\nexport const buildChartData = (list) => {\n\n    const intervals = list.map(item => {\n        const start = DateTime.fromISO(item.start);\n        const end = DateTime.fromISO(item.end);\n        return {\n            id: item.id,\n            interval: Interval.fromDateTimes(start, end),\n            start: start,\n            end: end,\n        }\n    });\n\n    let newHours = [];\n    for (let hour = CHART_START_HOUR; hour <= CHART_END_HOUR; hour++) {\n        let sum = 0;\n        const startHour = DateTime.fromObject({ hour, minute: 0, second: 0});\n        const endHour = DateTime.fromObject({ hour, minute: 59, second: 59});\n        const currentHourInterval = Interval.fromDateTimes(startHour, endHour);\n        const found = intervals.filter(int => currentHourInterval.intersection(int.interval));\n        if (found.length > 0) {\n            let duration = MINUTES_IN_HOUR;\n            found.forEach((el) => {\n                if (el.end.hour === hour && el.start.hour === hour) {\n                    duration = el.end.diff(el.start, ['minutes']).toObject().minutes;\n                } else if (el.end.hour === hour) {\n                    duration = el.end.minute;\n                } else if (el.start.hour === hour) {\n                    duration = MINUTES_IN_HOUR - el.start.minute;\n                }\n                sum += duration;\n            });\n        }\n        newHours.push({\n            hour,\n            value: sum > MINUTES_IN_HOUR ? MINUTES_IN_HOUR : sum,\n        });\n    }\n\n    return newHours;\n};\n\nexport default {\n    getNextId,\n    getRandom,\n    buildChartData,\n}\n","import React, {Component} from 'react';\nimport { connect } from 'react-redux';\n\nimport { DateTime } from 'luxon';\n\nimport Input from '@material-ui/core/Input';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport { withStyles } from '@material-ui/core/styles';\n\nimport styles from '../../styles';\nimport Timer from './Timer';\nimport MyDialog from './Dialog';\nimport { setNameAction, addLogAction, createItemAction } from '../../actions/timer';\nimport { getNextId } from '../../helpers';\n\nclass Task extends Component {\n\n    constructor(props) {\n        super();\n        const { timer: { item } } = props;\n\n        if (item && item.id !== 0) {\n            const diffInMillis = DateTime.fromISO(item.start).diffNow('millisecond');\n            this.state = {\n                started: true,\n                duration: Math.abs(diffInMillis.valueOf()),\n                name: item.name,\n                dialog: false,\n            }\n        }\n    }\n\n    state = {\n        name: '',\n        started: false,\n        duration: 0,\n        dialog: false,\n    };\n\n    onChangeName = (e) => {\n        const { changeName } = this.props;\n\n        this.setState({\n            name: e.target.value,\n        });\n\n        changeName(e.target.value);\n    };\n\n    onStartClick = () => {\n        const { name } = this.state;\n        const { createItem } = this.props;\n\n        this.setState({\n            started: true,\n        });\n\n        const item = {\n            id: getNextId(),\n            start: DateTime.local().toISO(),\n            name,\n            end: null,\n            duration: null,\n        };\n\n        createItem(item);\n    };\n\n    onStopClick = () => {\n        const { name } = this.state;\n        const { addToLog, timer: { item } } = this.props;\n\n        if (!name) {\n            this.openDialog();\n        } else {\n\n            this.setState({\n                started: false,\n                name: '',\n            });\n\n            const end = DateTime.local();\n            const timer = {\n                id: item.id,\n                name,\n                start: item.start,\n                end: end.toISO(),\n                duration: end.diff(DateTime.fromISO(item.start), ['hours', 'minutes', 'seconds']).toObject(),\n            };\n\n            addToLog(timer);\n        }\n    };\n\n    closeDialog = () => {\n        return () => {\n            this.setState({dialog: false});\n        }\n    };\n\n    openDialog = () => {\n        this.setState({dialog: true});\n    };\n\n    renderButton = (started) => {\n        const { classes } = this.props;\n\n        return (\n            <Button className={classes.button} variant='contained' size='small' onClick={started ? this.onStopClick : this.onStartClick}>\n                { started ? 'Stop' : 'Start' }\n            </Button>\n        );\n    };\n\n    render() {\n        const { started, duration, name, dialog } = this.state;\n        const { classes } = this.props;\n\n        return (\n            <Grid container spacing={8} justify={'center'} className={classes.taskWrapper}>\n                <Grid item xs={12}>\n                    <MyDialog open={dialog} closeDialog={this.closeDialog}/>\n                </Grid>\n                <Grid item xs={12}>\n                    <Input className=\"taskInput\" value={name} name={'timerName'} onChange={this.onChangeName}/>\n                </Grid>\n                <Grid item xs={12}>\n                    <Timer started={started} duration={duration}/>\n                </Grid>\n                <Grid item xs={12}>\n                    { this.renderButton(started) }\n                </Grid>\n            </Grid>\n        );\n    }\n}\n\nexport default connect(\n    (state) => ({\n        timer: state.timer,\n    }),\n    (dispatch) => ({\n        changeName: (name) => dispatch(setNameAction(name)),\n        addToLog: (item) => dispatch(addLogAction(item)),\n        createItem: (item) => dispatch(createItemAction(item)),\n    }))(withStyles(styles)(Task));\n","import React, {PureComponent} from 'react';\nimport { Link } from 'react-router-dom';\nimport { connect} from 'react-redux';\n\nimport { DateTime } from 'luxon';\n\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Button from '@material-ui/core/Button';\nimport { withStyles } from '@material-ui/core/styles';\n\nimport styles from '../../styles';\nimport { deleteFromLogAction } from '../../actions/timer';\n\nclass Log extends PureComponent {\n\n    destroy = (id) => {\n        return () => {\n            const { deleteFromLog } = this.props;\n            deleteFromLog(id);\n        }\n    };\n\n    render() {\n        const { classes, list } = this.props;\n\n        return (\n            <React.Fragment>\n                <Table>\n                    <TableHead>\n                        <TableRow>\n                            <TableCell align='center'>№</TableCell>\n                            <TableCell align='center'>Task</TableCell>\n                            <TableCell align='center'>Time Start</TableCell>\n                            <TableCell align='center'>Time End</TableCell>\n                            <TableCell align='center'>Time Spend</TableCell>\n                            <TableCell align='center'>Info</TableCell>\n                            <TableCell align='center'>Delete</TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        { list.map(row => (\n                            <TableRow className={classes.logRow} key={row.id}>\n                                <TableCell className={classes.logCell}>{row.id}</TableCell>\n                                <TableCell className={classes.logCell}>{row.name}</TableCell>\n                                <TableCell className={classes.logCell}>{DateTime.fromISO(row.start).toFormat('HH:mm:ss')}</TableCell>\n                                <TableCell className={classes.logCell}>{DateTime.fromISO(row.end).toFormat('HH:mm:ss')}</TableCell>\n                                <TableCell className={classes.logCell}>{DateTime.fromObject(row.duration).toFormat('HH:mm:ss')}</TableCell>\n                                <TableCell className={classes.logCell}>\n                                    <Button\n                                        className={classes.button}\n                                        variant='contained'\n                                        component={Link}\n                                        to={`/tasks/${row.id}`}\n                                    >\n                                        Info\n                                    </Button>\n                                </TableCell>\n                                <TableCell align='center'><Button className={classes.button} variant='contained' size='small' onClick={this.destroy(row.id)}>Delete</Button></TableCell>\n                            </TableRow>\n                        )) }\n                    </TableBody>\n                </Table>\n            </React.Fragment>\n        );\n    }\n\n} export default connect(\n    (state) => ({\n        list: state.timer.list,\n    }),\n    (dispatch) => ({\n        deleteFromLog: (item) => dispatch(deleteFromLogAction(item)),\n    }))(withStyles(styles)(Log));\n","import React, { Component, Fragment } from 'react';\nimport { connect } from 'react-redux';\n\nimport { ResponsiveContainer, BarChart, Bar, CartesianGrid, XAxis, YAxis, Legend } from 'recharts';\nimport { DateTime } from 'luxon';\n\nimport { withStyles } from '@material-ui/core/styles/index';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\n\nimport styles from '../../styles';\nimport { clearLogAction, createLogAction} from '../../actions/timer';\n\nimport { getRandom, buildChartData } from '../../helpers';\nimport { GENERATE_MIN_DURATION, GENERATE_MAX_DURATION, GENERATE_MIN_INTERVAL, GENERATE_MAX_INTERVAL, GENERATE_MIN_TASKS, GENERATE_MAX_TASKS, GENERATE_START_HOUR}  from '../../helpers/constants';\n\nclass Chart extends Component {\n\n    generateEvents = () => {\n        const { createLog, clearLog } = this.props;\n\n        clearLog();\n\n        let date = DateTime.fromObject({ hour: GENERATE_START_HOUR });\n        const list = [];\n\n        for (let i = 1; i < getRandom(GENERATE_MIN_TASKS, GENERATE_MAX_TASKS); i++) {\n            const interval = getRandom(GENERATE_MIN_INTERVAL, GENERATE_MAX_INTERVAL);\n            const minutes = getRandom(GENERATE_MIN_DURATION, GENERATE_MAX_DURATION);\n            const start = date.plus({ minutes: interval });\n            const end = start.plus({ minutes });\n            date = date.plus({ minutes: minutes + interval });\n\n            const item = {\n                id: i,\n                name: `item${i}`,\n                start: start.toISO(),\n                end: end.toISO(),\n                duration: end.diff(start, ['hours', 'minutes', 'seconds']).toObject(),\n            };\n\n            list.push(item);\n        }\n\n        createLog(list);\n    };\n\n    render() {\n        const { classes, list } = this.props;\n\n        return (\n            <Fragment>\n                <ResponsiveContainer width='100%' height={300}>\n                    <BarChart data={buildChartData(list)} margin={{ top: 20, right: 30, left: 0, bottom: 0 }}>>\n                        <XAxis dataKey='hour' />\n                        <YAxis />\n                        <CartesianGrid/>\n                        <Bar type='monotone' dataKey='value' name='Minutes in this hours' fill='#3248C7' barSize={30} />\n                        <Legend verticalAlign='bottom' />\n                    </BarChart>\n                </ResponsiveContainer>\n                <Grid container>\n                    <Grid item xs={12} className={classes.chartButtonContainer}>\n                        <Button variant='contained' size='small' className={classes.button} onClick={this.generateEvents}>\n                            Generate\n                        </Button>\n                    </Grid>\n                </Grid>\n            </Fragment>\n        );\n    }\n}\nexport default connect(\n    (state) => ({\n        list: state.timer.list,\n    }),\n    (dispatch) => ({\n        createLog: (list) => dispatch(createLogAction(list)),\n        clearLog: () => dispatch(clearLogAction()),\n    })\n    )(withStyles(styles)(Chart));\n","import React, { Component , Fragment } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport Grid from '@material-ui/core/Grid';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport { withStyles } from '@material-ui/core/styles';\n\nimport styles from '../styles';\nimport Task from './parts/Task';\nimport Log from './parts/Log';\nimport Chart from './parts/Chart';\n\nclass Main extends Component {\n\n    getCurrentTab = () => {\n        const { match: { params: { tab = 'log' }} } = this.props;\n        return tab;\n    };\n\n    renderTab = () => {\n        const tab = this.getCurrentTab();\n\n        switch (tab) {\n            case 'log':\n                return <Log/>;\n            case 'chart':\n                return <Chart/>;\n            default:\n                return '';\n        }\n\n    };\n\n    render() {\n        const { classes } = this.props;\n        const tab = this.getCurrentTab();\n        return (\n            <Fragment>\n                <Task/>\n                <Grid container spacing={8} justify={'center'} className={classes.mainContainer}>\n                    <Grid item lg={1}/>\n                    <Grid item lg={9} md={12} xs={12}>\n                        <Tabs value={tab} className={classes.mainTabList} variant='fullWidth'>\n                            <Tab className={classes.mainTab} label='Tasks log' value='log' component={Link} to='/log'/>\n                            <Tab className={classes.mainTab} label='Tasks chart' value='chart' component={Link} to='/chart'/>\n                        </Tabs>\n                        { this.renderTab() }\n                    </Grid>\n                    <Grid item lg={1}/>\n                </Grid>\n            </Fragment>\n        )\n    }\n\n} export default withStyles(styles)(Main);\n","import React, { PureComponent } from 'react';\nimport { connect } from 'react-redux';\nimport { Link, Redirect } from 'react-router-dom';\n\nimport { DateTime } from 'luxon';\n\nimport Grid from '@material-ui/core/Grid';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport Divider from '@material-ui/core/Divider';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport { withStyles } from '@material-ui/core/styles';\n\nimport styles from '../styles';\nimport ring from '../styles/images/ring.svg';\nimport { getTask, clearTask } from '../actions/task';\n\nclass Info extends PureComponent {\n\n    componentDidMount() {\n        const { match, getTask } = this.props;\n\n        if (match.params.id) {\n            getTask(match.params.id)\n        }\n    }\n\n    componentWillUnmount() {\n        const { clearTask } = this.props;\n\n        clearTask()\n    }\n\n    renderInfo() {\n        const { task, classes } = this.props;\n        const { item } = task;\n\n        if (task.loading) {\n            return (\n                <div className={classes.infoPreloader}>\n                    <img src={ring} alt=\"\" height={100} />\n                </div>\n            )\n        } else if (task.failed && item === 404) {\n            return (\n                <Redirect to='/404' />\n            )\n        } else if (task.success) {\n            return (\n                <Card className={classes.infoCard}>\n                    <CardActionArea>\n                        <CardHeader title={item.name} align='center'/>\n                        <Divider/>\n                        <CardContent>\n                            <React.Fragment>\n                                <Typography variant='h6' component='h5'>\n                                    ID: {item.id}\n                                </Typography>\n                                <Typography variant='h6' component='h5'>\n                                    Start: {DateTime.fromISO(item.start).toFormat('HH:mm:ss')}\n                                </Typography>\n                                <Typography variant='h6' component='h5'>\n                                    End: {DateTime.fromISO(item.end).toFormat('HH:mm:ss')}\n                                </Typography>\n                                <Typography variant='h6' component='h5'>\n                                    Duration: {DateTime.fromObject(item.duration || {}).toFormat('HH:mm:ss')}\n                                </Typography>\n                            </React.Fragment>\n                        </CardContent>\n                        <Divider/>\n                    </CardActionArea>\n\n                    <CardActions className={classes.infoFooter}>\n                        <Button\n                            className={classes.button}\n                            variant='contained'\n                            component={Link}\n                            to={'/log'}\n                        >\n                            Back\n                        </Button>\n                    </CardActions>\n            </Card>\n            )\n        }\n    }\n\n    render() {\n        return (\n            <Grid container justify={'center'}>\n                { this.renderInfo() }\n            </Grid>\n        )\n    }\n}\nexport default connect(\n    (state) => ({\n        task: state.task,\n    }), (dispatch) => ({\n        getTask: (id) => dispatch(getTask(id)),\n        clearTask: () => dispatch(clearTask()),\n    }))(withStyles(styles)(Info));\n","import React, {PureComponent} from 'react';\nimport { Link } from 'react-router-dom';\n\nimport Button from '@material-ui/core/Button';\nimport { withStyles } from '@material-ui/core/styles';\n\nimport styles from '../styles';\n\nclass NotFound extends PureComponent {\n    render() {\n        const { classes } = this.props;\n\n        return (\n            <div align='center'>\n                <h2>404 - Not found</h2>\n\n                <Button\n                    className={classes.button}\n                    variant='contained'\n                    component={Link}\n                    to={'/log'}\n                >\n                    Back\n                </Button>\n            </div>\n        );\n    }\n}\nexport default withStyles(styles)(NotFound);\n","import React, { Component } from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport Main from './components/Main';\nimport Info from './components/Info';\nimport NotFound from './components/NotFound';\n\nexport default class App extends Component {\n    render() {\n        const { PUBLIC_URL } = process.env;\n\n        console.log(PUBLIC_URL);\n\n        return (\n            <BrowserRouter basename={process.env.PUBLIC_URL}>\n                <Switch>\n                    <Route exact path='/404' component={NotFound}/>\n                    <Route path='/tasks/:id' component={Info}/>\n                    <Route path='/:tab?' component={Main} />\n                </Switch>\n            </BrowserRouter>\n        );\n    }\n}\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\n\nimport { createStore, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport createSagaMiddleware from 'redux-saga';\n\nimport { DateTime } from 'luxon';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nimport localStorageMiddleware from './middleware/localStorage';\nimport rootReducer  from './reducers';\nimport rootSaga  from './sagas';\n\nimport './index.css';\nimport App from './App';\n\nconst startup = () => {\n    const initialState = {\n        timer: {\n            item: {\n                id: 0,\n                name: '',\n                start: null,\n                end: null,\n                duration: null,\n            },\n            list: [],\n        }\n    };\n\n    try {\n        const item = JSON.parse(localStorage.getItem('item'));\n        if (item) {\n            const diffInMillis = DateTime.fromISO(item.start).diffNow('millisecond');\n            initialState.timer.item = {\n                id: item.id,\n                name: localStorage.getItem('name') || '',\n                start: item.start,\n                duration: Math.abs(diffInMillis.valueOf()),\n            };\n        }\n\n        const list = JSON.parse(localStorage.getItem('list')) || [];\n        initialState.timer.list = list.map(item => ({\n            id: item.id,\n            name: item.name,\n            start: item.start,\n            end: item.end,\n            duration: item.duration,\n        }));\n\n        return initialState;\n    } catch (error) {\n        console.error('startup', error);\n    }\n};\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst preloadedState = startup();\n\nconst store = createStore(\n    rootReducer,\n    preloadedState,\n    composeWithDevTools(applyMiddleware(localStorageMiddleware(), sagaMiddleware)),\n);\n\nsagaMiddleware.run(rootSaga);\n\nReactDOM.render(\n    <Provider store={ store }>\n        <App />\n    </Provider>,\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}